% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eval.R, R/presets.R
\name{r}
\alias{r}
\alias{r_safe}
\title{Evaluate an expression in another R session}
\usage{
r(func, args = list(), libpath = .libPaths(),
  repos = c(getOption("repos"), c(CRAN = "https://cloud.r-project.org")),
  stdout = NULL, stderr = NULL, error = getOption("callr.error",
  "error"), cmdargs = c("--slave", "--no-save", "--no-restore"),
  show = FALSE, callback = NULL, block_callback = NULL,
  spinner = show && interactive(), system_profile = FALSE,
  user_profile = FALSE, env = rcmd_safe_env(), timeout = Inf)

r_safe(func, args = list(), libpath = .libPaths(),
  repos = c(getOption("repos"), c(CRAN = "https://cloud.r-project.org")),
  stdout = NULL, stderr = NULL, error = getOption("callr.error",
  "error"), cmdargs = c("--slave", "--no-save", "--no-restore"),
  show = FALSE, callback = NULL, block_callback = NULL,
  spinner = show && interactive(), system_profile = FALSE,
  user_profile = FALSE, env = rcmd_safe_env(), timeout = Inf)
}
\arguments{
\item{func}{Function object to call in the new R process.
The function should be self-contained and only refer to
other functions and use variables explicitly from other packages
using the \code{::} notation. The environment of the function
is set to \code{.GlobalEnv} before passing it to the child process.
Because of this, it is good practice to create an anonymous
function and pass that to \code{callr}, instead of passing
a function object from a (base or other) package. In particular\preformatted{r(.libPaths)
}

does not work, because \code{.libPaths} is defined in a special
environment, but\preformatted{r(function() .libPaths())
}

works just fine.}

\item{args}{Arguments to pass to the function. Must be a list.}

\item{libpath}{The library path.}

\item{repos}{The \emph{repos} option. If \code{NULL}, then no
\emph{repos} option is set. This options is only used if
\code{user_profile} or \code{system_profile} is set \code{FALSE},
as it is set using the system or the user profile.}

\item{stdout}{The name of the file the standard output of
the child R process will be written to.
If the child process runs with the \code{--slave} option (the default),
then the commands are not echoed and will not be shown
in the standard output. Also note that you need to call \code{print()}
explicitly to show the output of the command(s).}

\item{stderr}{The name of the file the standard error of
the child R process will be written to.
In particular \code{message()} sends output to the standard
error. If nothing was sent to the standard error, then this file
will be empty. This can be the same file as \code{stderr}, although there
is no guarantee that the lines will be in the correct chronological
order.}

\item{error}{What to do if the remote process throws an error.
See details below.}

\item{cmdargs}{Command line arguments to pass to the R process.
Note that \code{c("-f", rscript)} is appended to this, \code{rscript}
is the name of the script file to run. This contains a call to the
supplied function and some error handling code.}

\item{show}{Logical, whether to show the standard output on the screen
while the child process is running. Note that this is independent
of the \code{stdout} and \code{stderr} arguments. The standard
error is not shown currently.}

\item{callback}{A function to call for each line of the standard
output and standard error from the child process. It works together
with the \code{show} option; i.e. if \code{show = TRUE}, and a
callback is provided, then the output is shown of the screen, and the
callback is also called.}

\item{block_callback}{A function to call for each block of the standard
output and standard error. This callback is not line oriented, i.e.
multiple lines or half a line can be passed to the callback.}

\item{spinner}{Whether to show a calming spinner on the screen while
the child R session is running. By default it is shown if
\code{show = TRUE} and the R session is interactive.}

\item{system_profile}{Whether to use the system profile file.}

\item{user_profile}{Whether to use the user's profile file.}

\item{env}{Environment variables to set for the child process.}

\item{timeout}{Timeout for the function call to finish. It can be a
\link[base:difftime]{base::difftime} object, or a real number, meaning seconds.
If the process does not finish before the timeout period expires,
then a \code{system_command_timeout_error} error is thrown. \code{Inf}
means no timeout.}
}
\value{
Value of the evaluated expression.
}
\description{
From \code{callr} version 2.0.0, \code{r()} is equivalent to \code{r_safe()}, and
tries to set up a less error prone execution environment. In particular:
\itemize{
\item It makes sure that at least one reasonable CRAN mirror is set up.
\item Adds some command line arguments are added to avoid saving
\code{.RData} files, etc.
\item Ignores the system and user profiles.
\item Various environment variables are set: \code{CYGWIN} to avoid
warnings about DOS-style paths, \code{R_TESTS} to avoid issues
when \code{callr} is invoked from unit tests, \code{R_BROWSER}
and \code{R_PDFVIEWER} to avoid starting a browser or a PDF viewer.
See \code{\link[=rcmd_safe_env]{rcmd_safe_env()}}.
}
}
\details{
The pre-2.0.0 \code{r()} function is called \code{\link[=r_copycat]{r_copycat()}} now.
}
\section{Error handling}{


\code{callr} handles errors properly. If the child process throws an
error, then \code{callr} throws an error with the same error message
in the parent process.

The \code{error} expert argument may be used to specify a different
behavior on error. The following values are possible:
\itemize{
\item \code{error} is the default behavior: throw an error in the parent, with
the same error message. In fact the same error object is thrown again.
\item \code{stack} also throws an error in the parent, but the error
is of a special kind, class \code{callr_error}, and it contains
both the original error object, and the call stack of the child,
as written out by \code{\link[utils:dump.frames]{utils::dump.frames()}}.
\item \code{debugger} is similar to \code{stack}, but in addition
to returning the complete call stack, it also start up a debugger
in the child call stack, via \code{\link[utils:debugger]{utils::debugger()}}.
}

The default error behavior can be also set using the \code{callr.error}
option. This is useful to debug code that uses \code{callr}.
}

\examples{
\dontrun{
# Workspace is empty
r(function() ls())

# library path is the same by default
r(function() .libPaths())
.libPaths()
}

}
\seealso{
Other callr functions: \code{\link{r_copycat}},
  \code{\link{r_vanilla}}
}
\concept{callr functions}
